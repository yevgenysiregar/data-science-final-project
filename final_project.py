# -*- coding: utf-8 -*-
"""Final_Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yIMCUOu-0HZz6S4CDNX4ksziaD9aU4im
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

df = pd.read_csv('/content/Walmart_Sales.csv')
df.head()

# General dataset information
df.info()

"""Based on the dataset info, there are still wrong format in the column. The Date datatype is supposed to be datetime"""

# checking the amount of data that are loss on every column
df.isnull().sum().sort_values(ascending=False)

# checking duplicated data
df.duplicated().sum()

"""## Data Preprocessing"""

# changing Date format
df['Date'] = pd.to_datetime(df['Date'], format="%d-%m-%Y")

df['Date'].head()

# extract year, month and day from Date column
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day

df.head()

"""## Exploratory Data Analysis"""

df.describe()

# show total weekly sales per year
df.groupby('Date')['Weekly_Sales'].sum().plot(kind='line')
plt.title('Total Weekly Sales per Year')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.show()

# show average of total weekly sales per year
df.groupby('Date')['Weekly_Sales'].mean().plot(kind='line')
plt.title('Average Weekly Sales per Year')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.show()

# show total unemployment per year
df.groupby('Year')['Unemployment'].sum().plot(kind='line')
plt.title('Total Unemployment per Year')
plt.xlabel('Year')
plt.ylabel('Total Unemployment')
plt.show()

df.groupby('Holiday_Flag')['Weekly_Sales'].sum().plot(kind='bar')
plt.title('Total Weekly Sales based on Holiday Flag')
plt.xlabel('Holiday Flag')
plt.ylabel('Total Sales')
plt.show()

"""0 : Normal Days
1 : Holiday
"""

df.groupby('Holiday_Flag')['Weekly_Sales'].mean().plot(kind='bar')
plt.title('Average Weekly Sales based on Holiday Flag')
plt.xlabel('Holiday Flag')
plt.ylabel('Total Sales')
plt.show()

corr = df.corr()
plt.figure(figsize=(10,8))
sns.heatmap(corr, annot=True)
plt.show()

df.plot(kind='scatter', x='Temperature', y='Weekly_Sales')
plt.title('Correlation between Temperature and Weekly Sales')
plt.xlabel('Temperature')
plt.ylabel('Weekly Sales')
plt.show()

df.plot(kind='scatter', x='Fuel_Price', y='Weekly_Sales')
plt.title('Correlation between Fuel Price and Weekly Sales')
plt.xlabel('Fuel Price')
plt.ylabel('Weekly Sales')
plt.show()

# Checking Outliers
sns.boxplot(x='Weekly_Sales', data=df)
plt.title('Boxplot of Weekly Sales')
plt.show()

# deleting outliers
q1 = df['Weekly_Sales'].quantile(0.25)
q3 = df['Weekly_Sales'].quantile(0.75)
iqr = q3 - q1
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

df = df[(df['Weekly_Sales'] >= lower_bound) & (df['Weekly_Sales'] <= upper_bound)]

df.head()

df.info()

df.query('Year == 2012')

df

# group weekly sales based on year, month and date and calculating the average
df_new = df.groupby(['Year', 'Month', 'Day'])['Weekly_Sales'].mean().reset_index()

df_new

# create date column
df_new['Date'] = pd.to_datetime(df_new[['Year', 'Month', 'Day']])

"""## Data Splitting"""

X = df_new[['Year', 'Month', 'Day']]
y = df_new[['Weekly_Sales']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## Feature Engineering"""

# feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""## Linear Regression"""

# Define the model
model_lr = LinearRegression()
model_lr.fit(X_train, y_train)

X_test

y_pred = model_lr.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

r2 = r2_score(y_test, y_pred)
print("R-squared:", r2)

mae = mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error:", mae)

"""## Random Forest Regression"""

model_rf = RandomForestRegressor(n_estimators=100,max_depth=25)

model_rf.fit(X_train, y_train)

y_pred = model_rf.predict(X_test)

mse = mean_squared_error(y_pred, y_test)
print("Mean Squared Error:", mse)

r2 = r2_score(y_pred, y_test)
print("R-squared:", r2)

mae = mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error:", mae)

"""Prediction using random forest model"""

# predict weekly sales 2 years ahead
data = {
    'week': pd.date_range(start='2012-10-26', periods=104, freq='W-SUN'),  # 2 years weekly data
    'sales': np.random.rand(104) * 1000  # sales value random
}

df_future = pd.DataFrame(data)

df_future

df_future['Year'] = df_future['week'].dt.year
df_future['Month'] = df_future['week'].dt.month
df_future['Day'] = df_future['week'].dt.day

prediction = model_rf.predict(df_future[['Year', 'Month', 'Day']])

# prediction result plot
plt.figure(figsize=(10, 6))
plt.plot(df_new['Date'], df_new['Weekly_Sales'], label='Actual Data')
plt.plot(df_future['week'], prediction, label='Prediction', linestyle='--')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Weekly Sales')
plt.title('Weekly Sales Average Prediction 2 Years Ahead')
plt.show()